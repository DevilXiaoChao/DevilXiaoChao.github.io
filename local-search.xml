<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux安装过程中常见问题</title>
    <link href="/2024/05/02/Linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2024/05/02/Linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>给服务器安装Linux系统，尤其是国产化的系统时，经常会遇到一些问题，特此记录一下。</p>          </div><span id="more"></span><ul><li><h3 id="问题1：找不到硬盘"><a href="#问题1：找不到硬盘" class="headerlink" title="问题1：找不到硬盘"></a>问题1：找不到硬盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 刚进入install安装页面时按e，末尾添加以下内容</span><br>pci=nomsi nolapic noapic<br></code></pre></td></tr></table></figure></li><li><h3 id="问题2：设置基础软件仓库时出错"><a href="#问题2：设置基础软件仓库时出错" class="headerlink" title="问题2：设置基础软件仓库时出错"></a>问题2：设置基础软件仓库时出错</h3><p><a href="https://blog.csdn.net/ShenSeKyun/article/details/127220974">https://blog.csdn.net/ShenSeKyun/article/details/127220974</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这里以安装anolis os为例：</span><br>vmlinuz-4.19.91-26.an8.x86_64 initrd=initrd-4.19.91-26.an8.x86_64.img inst.stage2=hd:/dev/sdb4 quiet<br><span class="hljs-comment"># 末尾添加</span><br>inst.repo=hd:LABEL=xxxx  或者 inst.repo=hd:/dev/sdb4<br><span class="hljs-comment"># inst.repo的值和inst.stage2保持相同</span><br><br><span class="hljs-comment"># 完整启动项</span><br>vmlinuz-4.19.91-26.an8.x86_64 initrd=initrd-4.19.91-26.an8.x86_64.img inst.stage2=hd:/dev/sdb4 quiet inst.repo=hd:/dev/sdb4<br></code></pre></td></tr></table></figure></li><li><h3 id="问题3：dracut-initqueue-timeout"><a href="#问题3：dracut-initqueue-timeout" class="headerlink" title="问题3：dracut- initqueue   timeout"></a>问题3：dracut- initqueue   timeout</h3><p><a href="https://blog.csdn.net/KT986/article/details/128609947">https://blog.csdn.net/KT986/article/details/128609947</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 确认U盘所在位置</span><br><span class="hljs-built_in">cd</span> /dev<br><span class="hljs-built_in">ls</span> | grep sd<br><span class="hljs-comment"># 将u盘拔下，再插入，再查看硬盘信息</span><br><span class="hljs-comment"># 这里是sdb4</span><br><br><span class="hljs-comment"># reboot重启</span><br><br><span class="hljs-comment"># 进入安装界面，install界面按Tab</span><br>vmlinuz-4.19.91-26.an8.x86_64 initrd=initrd-4.19.91-26.an8.x86_64.img inst.stage2=hd:LABEL=anolis-8-x86_64-dvd quiet<br><span class="hljs-comment"># 修改为</span><br>vmlinuz-4.19.91-26.an8.x86_64 initrd=initrd-4.19.91-26.an8.x86_64.img inst.stage2=hd:/dev/sdb4 quiet<br><span class="hljs-comment"># 修改完成回车确认进入</span><br><br><span class="hljs-comment"># 这里就是指定具体分区位置</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员笔记</title>
    <link href="/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/04/26/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>想起来啥，就写啥，略显凌乱~</p>          </div><span id="more"></span><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="–-常用命令"><a href="#–-常用命令" class="headerlink" title="– 常用命令"></a>– 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 自动补全命令</span><br>yum install -y bash-completion<br><br><span class="hljs-comment"># 查看系统内存</span><br>free -h<br><br><span class="hljs-comment"># 查看系统版本信息</span><br><span class="hljs-built_in">cat</span> /etc/redhat-release<br><span class="hljs-built_in">cat</span> /proc/version<br><span class="hljs-built_in">uname</span> -a<br><br><span class="hljs-comment"># 查看服务器是物理机还是虚拟机</span><br>dmidecode -s system-manufacturer<br><br><span class="hljs-comment"># 安装htop</span><br>yum install epel-release -y<br>yum -y install htop<br><br><span class="hljs-comment"># 安装常用命令</span><br>yum -y install telnet net-tools sysstat<br><br><span class="hljs-comment"># Linux进程查看器</span><br>htop<br><br><span class="hljs-comment"># 显示cpu的相关信息</span><br>lscpu<br><br><span class="hljs-comment"># 查看CPU信息</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo<br><br><span class="hljs-comment"># 查看机器一共几个cpu</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;physical id&quot;</span>| <span class="hljs-built_in">sort</span>| <span class="hljs-built_in">uniq</span>| <span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 查看单个cpu的物理核数</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;cpu cores&quot;</span>| <span class="hljs-built_in">uniq</span><br><br><span class="hljs-comment"># 查看总逻辑核数</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo| grep <span class="hljs-string">&quot;processor&quot;</span>| <span class="hljs-built_in">wc</span> -l<br><br><span class="hljs-comment"># 查看SELinux工作模式</span><br>getenforce<br>sestatus<br><br><span class="hljs-comment"># 永久关闭selinux</span><br>vi /etc/selinux/config <br><span class="hljs-comment"># 关闭：SELINUX=disabled</span><br><span class="hljs-comment"># 宽容模式：SELINUX=permissive</span><br><span class="hljs-comment"># 强制模式：SELINUX=enforcing</span><br><br><span class="hljs-comment"># SELinux工作模式临时切换（重启失效）</span><br><span class="hljs-comment">#切换成宽容模式</span><br>setenforce 0<br><span class="hljs-comment">#切换成强制模式</span><br>setenforce 1<br><br><span class="hljs-comment"># 指定目录或文件以外的文件全部移动到新的目录</span><br>rsync -av --remove-source-files --exclude=<span class="hljs-string">&#x27;_install&#x27;</span> --exclude=<span class="hljs-string">&#x27;1.sh&#x27;</span> --exclude=<span class="hljs-string">&#x27;oper&#x27;</span> --exclude=<span class="hljs-string">&#x27;oper_bk&#x27;</span> --exclude=<span class="hljs-string">&#x27;oper_bk_0721&#x27;</span> --exclude=<span class="hljs-string">&#x27;oper_bk0801&#x27;</span> --exclude=<span class="hljs-string">&#x27;r_bk&#x27;</span> /dockerdata/nginx/html/api/ ~/test/<br><br><br><span class="hljs-comment"># linux 下 取进程占用 cpu 最高的前10个进程</span><br>ps aux|<span class="hljs-built_in">head</span> -1;ps aux|grep -v PID|<span class="hljs-built_in">sort</span> -rn -k +3|<span class="hljs-built_in">head</span><br>ps auxw|<span class="hljs-built_in">head</span> -1;ps auxw|<span class="hljs-built_in">sort</span> -rn -k3|<span class="hljs-built_in">head</span> -10<br><br><span class="hljs-comment"># linux 下 取进程占用内存(MEM)最高的前10个进程</span><br>ps aux|<span class="hljs-built_in">head</span> -1;ps aux|grep -v PID|<span class="hljs-built_in">sort</span> -rn -k +4|<span class="hljs-built_in">head</span><br>ps auxw|<span class="hljs-built_in">head</span> -1;ps auxw|<span class="hljs-built_in">sort</span> -rn -k4|<span class="hljs-built_in">head</span> -10<br><br><span class="hljs-comment"># 虚拟内存使用最多的前10个进程</span><br>ps auxw|<span class="hljs-built_in">head</span> -1;ps auxw|<span class="hljs-built_in">sort</span> -rn -k5|<span class="hljs-built_in">head</span> -10<br><br><span class="hljs-comment"># snmp v3测试连接</span><br>snmpwalk -v3 -u snmpv3User -l authNoPriv -a MD5 -A zmsj1234 192.168.101.7<br><br><span class="hljs-comment"># snmp v2测试连接</span><br>snmpwalk -v2c -c 团体字 ip<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 尽可能使用内存而不用swap </span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;vm.swappiness=1&quot;</span>&gt;&gt;/etc/sysctl.conf <br>sysctl -p <br> <br><span class="hljs-comment"># 刷新SWAP </span><br><span class="hljs-comment"># 刷新一次SWAP（将SWAP里的数据转储回内存，并清空SWAP里的数据） </span><br>swapoff -a &amp;&amp; swapon -a <br> <br><span class="hljs-comment"># 清理缓存 </span><br><span class="hljs-built_in">sync</span> <br><span class="hljs-built_in">echo</span> 3&gt; /proc/sys/vm/drop_caches <br></code></pre></td></tr></table></figure><h3 id="–-防火墙"><a href="#–-防火墙" class="headerlink" title="– 防火墙"></a>– 防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看防火墙状态</span><br>systemctl status firewalld<br><br><span class="hljs-comment"># 停止防火墙</span><br>systemctl stop firewalld<br><span class="hljs-comment"># 开机不启动</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld<br><br><span class="hljs-comment"># 开启防火墙</span><br>systemctl start firewalld<br><span class="hljs-comment"># 开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld<br><br><span class="hljs-comment"># 重启防火墙</span><br>systemctl restart firewalld<br><br><br><span class="hljs-comment"># 开放指定端口</span><br>firewall-cmd --zone=public --add-port=8080/tcp --permanent<br><br><span class="hljs-comment"># 不中断服务的重新加载防火墙</span><br>firewall-cmd --reload<br><br><span class="hljs-comment"># 查询哪些端口时开启的</span><br>firewall-cmd --list-port<br></code></pre></td></tr></table></figure><h3 id="–-查看网络连接、端口"><a href="#–-查看网络连接、端口" class="headerlink" title="– 查看网络连接、端口"></a>– 查看网络连接、端口</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//端口<br>netstat -tunlp |grep xxx    查看网络连接<br>-t (tcp) 仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化为数字<br>-l 仅列出在<span class="hljs-keyword">Listen</span>(监听)的服务状态<br>-p 显示建立相关链接的程序名<br><br>-a (<span class="hljs-keyword">all</span>) 显示所有选项，默认不显示<span class="hljs-keyword">LISTEN</span>相关。<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如uid等<br>-s 按各个协议进行统计<br>-c 每隔一个固定时间，执行该netstat命令<br><br>lsof -i:端口号 <br>用于查看某一端口的占用情况，比如查看<span class="hljs-number">9092</span>端口使用情况，lsof -i:<span class="hljs-number">9095</span><br><br></code></pre></td></tr></table></figure><h3 id="–-设置linux默认不启动图形界面"><a href="#–-设置linux默认不启动图形界面" class="headerlink" title="– 设置linux默认不启动图形界面"></a>– 设置linux默认不启动图形界面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl get-default<br></code></pre></td></tr></table></figure><p>返回结果：<br>multi-user.target 相当于init 3，命令行模式；<br>graphical.target  相当于init 5，图形界面模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置开机默认启动命令行模式：</span><br>systemctl set-default multi-user.target<br><br><span class="hljs-comment"># 设置开机默认启动图形界面：</span><br>systemctl set-default graphical.target<br></code></pre></td></tr></table></figure><h3 id="–-Linux启动提示“-x2F-dev-x2F-mapper-x2F-ao-root：unexpected-inconsistency-RUN-fsck-MANUALLY”解决办法"><a href="#–-Linux启动提示“-x2F-dev-x2F-mapper-x2F-ao-root：unexpected-inconsistency-RUN-fsck-MANUALLY”解决办法" class="headerlink" title="– Linux启动提示“&#x2F;dev&#x2F;mapper&#x2F;ao-root：unexpected inconsistency;RUN fsck MANUALLY”解决办法"></a>– Linux启动提示“&#x2F;dev&#x2F;mapper&#x2F;ao-root：unexpected inconsistency;RUN fsck MANUALLY”解决办法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在修复模式下输入以下命令后重启</span><br>fsck -y /dev/mapper/ao-root  <span class="hljs-comment"># 具体分区信息</span><br></code></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="- Docker安装"></a>- Docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装依赖</span><br>yum -y install yum-utils device-mapper-persistent-data lvm2<br><br><span class="hljs-comment"># 设置阿里镜像仓库</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br><span class="hljs-comment"># 更新yum索引</span><br>sudo yum makecache fast<br><br><span class="hljs-comment"># 安装docker-ce社区版</span><br>sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br><span class="hljs-comment"># 下载离线包</span><br><span class="hljs-comment"># yum install --downloadonly --downloaddir=./ docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><br><span class="hljs-comment"># 安装好以后启动docker 并设置开机自启</span><br>systemctl start docker<br>systemctl <span class="hljs-built_in">enable</span> docker<br><br><span class="hljs-comment"># 查看安装状态</span><br>docker info<br><br><span class="hljs-comment"># 查看Docker运行状态</span><br>systemctl status docker<br><br><span class="hljs-comment"># 重新启动Docker服务</span><br>systemctl restart docker<br><br><span class="hljs-comment"># 停止docker服务</span><br>systemctl stop docker<br></code></pre></td></tr></table></figure><p>配置镜像加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><br><span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;10m&quot;,</span><br><span class="hljs-string">    &quot;max-file&quot;: &quot;3&quot; </span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://uxs8f4rt.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 迁移docker安装位置</span><br><br>systemctl stop docker<br><br><span class="hljs-comment"># 复制Docker根目录</span><br><span class="hljs-built_in">cp</span> -a /var/lib/docker /www<br><br><span class="hljs-comment"># 编辑Docker的配置文件</span><br>vi /etc/docker/daemon.json<br><span class="hljs-comment"># 添加 &quot;data-root&quot;: &quot;/www/docker&quot;</span><br>&#123;<br><span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br><span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br><span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;10m&quot;</span>,<br><span class="hljs-string">&quot;max-file&quot;</span>: <span class="hljs-string">&quot;3&quot;</span> <br>&#125;,<br>    <span class="hljs-string">&quot;data-root&quot;</span>: <span class="hljs-string">&quot;/www/docker&quot;</span><br>&#125;<br><br>systemctl daemon-reload<br>systemctl start docker<br></code></pre></td></tr></table></figure><h3 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="- Docker Compose安装"></a>- Docker Compose安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 Docker Compose 的二进制文件。可以使用以下命令来下载最新版本的 Docker Compose：</span><br>curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><br><span class="hljs-comment"># 赋予 Docker Compose 可执行权限</span><br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br><br><span class="hljs-comment"># 验证 Docker Compose 是否安装成功：</span><br>docker-compose --version<br></code></pre></td></tr></table></figure><h3 id="Docker使用"><a href="#Docker使用" class="headerlink" title="- Docker使用"></a>- Docker使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载镜像</span><br>docker pull centos:7.9.2009<br><br><span class="hljs-comment"># 浏览镜像文件</span><br>docker images<br><br><span class="hljs-comment"># 删除镜像文件</span><br>docker image <span class="hljs-built_in">rm</span> hello-world<br><br><span class="hljs-comment"># 创建并启动容器(Container)</span><br>docker run -it --name centos7.9 -p 8888:8888 -p 80:80 centos:7.9.2009 bash<br><br><span class="hljs-comment"># 查看docker运行中的容器</span><br>docker ps<br><br><span class="hljs-comment"># 查看docker中的所有容器</span><br>docker ps -a<br><br><span class="hljs-comment"># 停止运行的容器</span><br>docker container stop 802<br><br><span class="hljs-comment"># 重新启动容器</span><br>docker container restart 802<br><br><span class="hljs-comment"># 进入(exec)指定容器(Container)</span><br>docker <span class="hljs-built_in">exec</span> -it 802 bash<br><br><span class="hljs-comment"># 删除(rm)容器(Container)</span><br>docker container <span class="hljs-built_in">rm</span> 802<br><br><span class="hljs-comment"># 如果删除运行中的容器，需要添加 -f 参数执行强制删除,例如:</span><br>docker container <span class="hljs-built_in">rm</span> -f 802<br><br><br><span class="hljs-comment"># docker字符集</span><br>yum reinstall glibc-common -y<br><br>localedef -i zh_CN -f UTF-8 zh_CN.UTF-8<br><span class="hljs-built_in">echo</span> LANG=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span> &gt; /etc/locale.conf<br></code></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="python安装"><a href="#python安装" class="headerlink" title="- python安装"></a>- python安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装依赖</span><br>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel <br><br><span class="hljs-comment"># 下载python安装包</span><br>wget http://npm.taobao.org/mirrors/python/3.9.16/Python-3.9.16.tgz<br><br><span class="hljs-comment"># 解压</span><br>tar -zxvf Python-3.9.16.tgz<br><span class="hljs-built_in">cd</span> Python-3.9.16<br><br><span class="hljs-comment"># 配置安装目录并编译安装</span><br>./configure prefix=/usr/local/python3<br>make &amp;&amp; make install<br><br><span class="hljs-comment"># 创建软链接</span><br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3.9 /usr/bin/python39<br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/pip3.9 /usr/bin/pip39<br><br><span class="hljs-comment"># 更换pip源</span><br>pip39 config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br><br><span class="hljs-comment">#更新pip</span><br>python39 -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="ssl证书生成配置"><a href="#ssl证书生成配置" class="headerlink" title="- ssl证书生成配置"></a>- ssl证书生成配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ssl配置</span><br><span class="hljs-built_in">mkdir</span> -p /etc/nginx/ssl/<br>openssl req -x509 -nodes -days 10000 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt<br><span class="hljs-comment"># nginx配置文件添加下面的语句</span><br>ssl_certificate /etc/nginx/ssl/nginx.crt;<br>ssl_certificate_key /etc/nginx/ssl/nginx.key;<br></code></pre></td></tr></table></figure><h3 id="nginx限制访问host"><a href="#nginx限制访问host" class="headerlink" title="- nginx限制访问host"></a>- nginx限制访问host</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 使用if语句判断域名是否为当前域名</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> != <span class="hljs-string">&quot;116.63.163.39&quot;</span>) &#123;<br><span class="hljs-attribute">return</span> <span class="hljs-number">403</span>; <span class="hljs-comment"># 如果不是 正确主机，则返回403 Forbidden</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nginx常用配置"><a href="#nginx常用配置" class="headerlink" title="- nginx常用配置"></a>- nginx常用配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2 ;<br>    <span class="hljs-attribute">server_name</span> www.yangchao.me;<br>    <span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;<br>    <span class="hljs-attribute">root</span> /www/wwwroot/web;<br>    <br>    <span class="hljs-comment"># 常见漏扫请求头，根据实际情况选择性添加，有些请求头影响调用，需要测试</span><br>    <br>    <span class="hljs-comment"># 指定了网页的嵌入策略，要求所有嵌入的内容都采用同源策略。可选参数包括 require-corp, unsafe-none 和 none。</span><br>    <span class="hljs-attribute">add_header</span> Cross-Origin-Embedder-Policy require-corp;<br>    <span class="hljs-comment"># 设置了跨源打开策略，限制了页面可以打开哪些源的窗口。# 可选参数包括 same-origin, same-origin-allow-popups 和 unsafe-none。</span><br>    <span class="hljs-attribute">add_header</span> Cross-Origin-Opener-Policy same-origin;<br>     <span class="hljs-comment"># 确定了跨域资源共享策略，仅允许同源的资源请求。</span><br>    <span class="hljs-attribute">add_header</span> Cross-Origin-Resource-Policy same-origin;<br>    <span class="hljs-comment"># 指定了清除网站数据的内容，包括缓存和cookies。可以指定需要清除的数据类型，如 cache, cookies, storage, executionContexts, plugins 等。</span><br>    <span class="hljs-attribute">add_header</span> Clear-Site-Data <span class="hljs-string">&quot;cache, cookies&quot;</span>;<br>    <span class="hljs-comment"># 定义了内容安全策略，限制了从哪些来源加载资源。如 default-src, script-src, style-src, img-src, connect-src, font-src, object-src, media-src, frame-src, child-src 等。</span><br>    <span class="hljs-attribute">add_header</span> Content-Security-Policy <span class="hljs-string">&quot;default-src &#x27;self&#x27;&quot;</span>;<br>    <span class="hljs-comment"># 设置了引用者策略，对跨源请求仅发送源的信息。可选参数包括 no-referrer, no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin 和 unsafe-url。</span><br>    <span class="hljs-attribute">add_header</span> Referrer-Policy strict-origin-when-cross-origin; <br>    <span class="hljs-comment"># 强制使用 HTTPS 连接，保证数据传输的安全性。</span><br>    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=63072000; includeSubdomains; preload&quot;</span>;<br>    <span class="hljs-comment"># 防止浏览器对响应的 MIME 类型进行嗅探。</span><br>    <span class="hljs-attribute">add_header</span> X-Content-Type-Options <span class="hljs-string">&quot;nosniff&quot;</span>;<br>    <span class="hljs-comment"># 禁止浏览器打开下载的文件，提高安全性。</span><br>    <span class="hljs-attribute">add_header</span> X-Download-Options noopen;<br>    <span class="hljs-comment"># 明确指定跨域策略为 none，禁止 Flash 跨域访问。</span><br>    <span class="hljs-attribute">add_header</span> X-Permitted-Cross-Domain-Policies <span class="hljs-literal">none</span>;<br>    <span class="hljs-comment"># 设置了 X-Frame-Options 头部，防止页面被嵌套到其他网站的 &lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; 或者 &lt;object&gt; 中。可选参数包括 DENY, SAMEORIGIN 和 ALLOW-FROM uri。</span><br>    <span class="hljs-attribute">add_header</span> X-Frame-Options <span class="hljs-string">&quot;SAMEORIGIN&quot;</span>;<br>    <span class="hljs-comment"># 启用浏览器的内置 XSS 过滤器，防止跨站脚本攻击。</span><br>    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">&quot;1; mode=block&quot;</span>;<br>    <br>    <span class="hljs-comment"># 强制跳转https</span><br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$server_port</span> !<span class="hljs-regexp">~ 443)</span>&#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment"># ssl证书配置</span><br>    <span class="hljs-attribute">ssl_certificate</span>    /www/server/panel/vhost/cert/web/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span>    /www/server/panel/vhost/cert/web/privkey.pem;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;<br>    <span class="hljs-comment">#add_header Strict-Transport-Security &quot;max-age=31536000&quot;; # 上面加过这个请求头了</span><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">497</span>  https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br><br>    <span class="hljs-comment">#禁止访问的文件或目录</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md)</span><br>    &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># 配置反向代理</span><br>    <span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /<br>    &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5000;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-number">127.0.0.1</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-variable">$connection_upgrade</span>;<br>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>        <span class="hljs-comment"># proxy_hide_header Upgrade;</span><br>    <br>        <span class="hljs-attribute">add_header</span> X-Cache <span class="hljs-variable">$upstream_cache_status</span>;<br>    <br>        <span class="hljs-comment">#设置 Nginx 缓存</span><br>        <span class="hljs-attribute">set</span> <span class="hljs-variable">$static_fileG0ZQTXEv</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">if</span> ( <span class="hljs-variable">$uri</span> <span class="hljs-regexp">~* &quot;\.(gif|png|jpg|css|js|woff|woff2)$&quot;</span> )<br>        &#123;<br>        <span class="hljs-attribute">set</span> <span class="hljs-variable">$static_fileG0ZQTXEv</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1m</span>;<br>            &#125;<br>        <span class="hljs-attribute">if</span> ( <span class="hljs-variable">$static_fileG0ZQTXEv</span> = <span class="hljs-number">0</span> )<br>        &#123;<br>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-literal">no</span>-cache;<br>        &#125;<br>    &#125;<br><br><br><span class="hljs-attribute">access_log</span>  /var/log/nginx/web.log;<br>    <span class="hljs-attribute">error_log</span>  /var/log/nginx/web.<span class="hljs-literal">error</span>.log;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="supervisor守护nginx"><a href="#supervisor守护nginx" class="headerlink" title="- supervisor守护nginx"></a>- supervisor守护nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[program:nginx]<br><span class="hljs-built_in">command</span>=/usr/bin/nginx -g <span class="hljs-string">&#x27;daemon off;&#x27;</span><br>directory=/usr/bin/<br>autostart=<span class="hljs-literal">true</span><br>autorestart=<span class="hljs-literal">true</span><br>redirect_stderr=<span class="hljs-literal">true</span><br>priority=10<br>stdout_logfile=/var/log/supervisor/nginx.log<br>stderr_logfile=/var/log/supervisor/nginx.err.log<br></code></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mysql 连接错误码1130(not allowed to connect to this MySQL server)解决</span><br><br>mysql -u root -p<br><br>GRANT ALL PRIVILEGES ON *.* TO `root`@`%` IDENTIFIED BY `password` WITH GRANT OPTION;<br>FLUSH PRIVILEGES;<br><br>或<br><br>use mysql;<br>update user <span class="hljs-built_in">set</span> Host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> User=<span class="hljs-string">&#x27;root&#x27;</span>;<br>FLUSH PRIVILEGES;<br><br>SELECT user, host FROM mysql.user;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows软件配置清单</title>
    <link href="/2022/12/11/Windows10%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95/"/>
    <url>/2022/12/11/Windows10%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一些电脑安装的软件，重装系统后，可以快速按照清单来安装软件</p></blockquote><h3 id="1-常用："><a href="#1-常用：" class="headerlink" title="1. 常用："></a>1. 常用：</h3><p><a href="https://browser.360.cn/eex/index.html?channel=9">360极速浏览器X</a></p><p><a href="https://www.huorong.cn/">火绒安全软件</a></p><p><a href="https://pinyin.sogou.com/">搜狗输入法</a></p><p><a href="https://www.google.cn/chrome/">Chrome浏览器</a></p><p><a href="https://www.7-zip.org/">7-Zip</a></p><p><a href="https://dm.weishi.360.cn/home.html">360驱动大师</a></p><p><a href="https://im.qq.com/">QQ</a></p><p><a href="https://pc.weixin.qq.com/">微信</a></p><p><a href="https://www.xunlei.com/">迅雷</a></p><p><a href="https://www.wegame.com.cn/">WeGame</a></p><p><a href="http://pan.baidu.com/download">百度网盘</a></p><p><a href="https://otp.landian.vip/zh-cn/">office</a> + visio</p><p><a href="https://potplayer.daum.net/?lang=zh_CN">PotPlayer</a></p><p><a href="https://notepad-plus-plus.org/">Notepad++</a></p><p><a href="https://music.163.com/#/download">网易云音乐</a></p><p><a href="https://y.qq.com/download/download.html">QQ音乐</a></p><p><a href="https://download.kugou.com/">酷狗音乐</a></p><p><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html">SumatraPDF</a></p><p><a href="https://www.typora.io/">Typora</a>（开始收费，目前安装的是旧版本0.9.93）</p><p><a href="https://cn.ultraiso.net/xiazai.html">软碟通</a></p><p><a href="http://kankan.meitu.com/">美图看看</a></p><p><a href="https://v.qq.com/">腾讯视频</a></p><p><a href="https://docs.snipaste.com/zh-cn/download">Snipaste</a></p><h3 id="2-可选："><a href="#2-可选：" class="headerlink" title="2. 可选："></a>2. 可选：</h3><p><a href="http://www.u.tools/">utools</a></p><p><a href="https://weibo.com/vposy">Adobe系列</a></p><p><a href="https://www.bitcomet.com/cn/downloads">BitComet</a></p><p><a href="https://calibre-ebook.com/download_windows">calibre</a></p><p><a href="http://www.pcgeshi.com/index.html">格式工厂</a></p><p><a href="https://www.diskinternals.com/linux-reader/">DiskInternals Linux Reader</a></p><p><a href="https://www.freedownloadmanager.org/zh/download.htm">Free Download Manager</a></p><p><a href="https://www.epicgames.com/store/zh-CN/">epic</a></p><p><a href="https://support.logi.com/hc/zh-cn/articles/360025298133">Logitech G HUB</a></p><p><a href="https://store.steampowered.com/">steam</a></p><p><a href="https://github.com/indiff/qttabbar">QTTabBar</a>中文二次开发</p><p>MP3tag</p><p>MIUI+</p><p>英伟达</p><p>树莓派</p><p>spacedesk</p><p>vnc</p><p>斗鱼 抖音 虎牙 哔哩哔哩 </p><h3 id="3-视频插件和工具："><a href="#3-视频插件和工具：" class="headerlink" title="3. 视频插件和工具："></a>3. 视频插件和工具：</h3><p>BorisFX</p><p>Mocha Plus-ins</p><p>VFX Suite</p><p>小丸工具箱</p><p>QuickTime</p><h3 id="4-编程环境和工具："><a href="#4-编程环境和工具：" class="headerlink" title="4. 编程环境和工具："></a>4. 编程环境和工具：</h3><p><a href="https://www.python.org/">Python</a></p><p><a href="https://www.oracle.com/java/technologies/downloads/">Java</a></p><p><a href="https://git-scm.com/">git</a></p><p><a href="https://nodejs.org/zh-cn/">Node.js</a></p><p><a href="https://dev.mysql.com/downloads/mysql/">MySQL</a></p><p><a href="https://code.visualstudio.com/">VS code</a></p><p><a href="https://www.vmware.com/cn/products/workstation-pro.html">VMware</a></p><p><a href="https://dbeaver.io/download/">DBeaver Community</a></p><p><a href="https://www.xshell.com/zh/free-for-home-school/">Xshell 和 Xftp</a></p><p><a href="https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701?rtc=1&activetab=pivot:overviewtab">Terminal</a></p><p><a href="https://www.jetbrains.com/toolbox-app/">JetBrains Toolbox App</a></p><p>IntelliJ Idea</p><p>IntelliJ Pycharm</p><p><a href="https://www.anaconda.com/">Anaconda</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端设置代理的方法</title>
    <link href="/2022/12/11/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2022/12/11/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>开启VPN后，有时候终端没有经过代理，这里记录几个让终端走代理的方法。</p><h1 id="一-启动VPN"><a href="#一-启动VPN" class="headerlink" title="一. 启动VPN"></a>一. 启动VPN</h1><p>不记录具体方法，不同vpn启动方式有差别</p><h1 id="二-设置代理"><a href="#二-设置代理" class="headerlink" title="二. 设置代理"></a>二. 设置代理</h1><h3 id="1-设置代理可以使用的环境变量"><a href="#1-设置代理可以使用的环境变量" class="headerlink" title="1. 设置代理可以使用的环境变量"></a>1. 设置代理可以使用的环境变量</h3><p><strong>http_proxy</strong>、<strong>https_proxy</strong>、<strong>ftp_proxy</strong>、<strong>socket_proxy</strong>、<strong>all_proxy</strong>、<strong>no_proxy</strong></p><h3 id="2-添加代理"><a href="#2-添加代理" class="headerlink" title="2. 添加代理"></a>2. 添加代理</h3><p>示例使用的ip为127.0.0.1，端口为7890和7891，具体ip和端口根据实际情况设置。</p><p>命令不需要全部使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890/&quot;</span><br><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890/&quot;</span><br><br><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;socks5://127.0.0.1:7891/&quot;</span><br><br><span class="hljs-built_in">export</span> no_proxy=<span class="hljs-string">&quot;localhost,127.0.0.0/8,::1&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-取消代理"><a href="#3-取消代理" class="headerlink" title="3. 取消代理"></a>3. 取消代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 取消 HTTP_PROXY 代理</span><br><span class="hljs-built_in">unset</span> http_proxy<br><br><span class="hljs-comment"># 取消 HTTPS_PROXY 代理</span><br><span class="hljs-built_in">unset</span> https_proxy<br><br><span class="hljs-comment"># 取消 FTP_PROXY 代理</span><br><span class="hljs-built_in">unset</span> ftp_proxy<br><br><span class="hljs-comment"># 取消 SOCKET_PROXY 代理</span><br><span class="hljs-built_in">unset</span> socket_proxy<br><br><span class="hljs-comment"># 取消 NO_PROXY 代理</span><br><span class="hljs-built_in">unset</span> no_proxy<br><br><span class="hljs-comment"># 取消 ALL_PROXY 代理</span><br><span class="hljs-built_in">unset</span> all_proxy<br></code></pre></td></tr></table></figure><h3 id="3-添加git代理"><a href="#3-添加git代理" class="headerlink" title="3. 添加git代理"></a>3. 添加git代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy http://127.0.0.1:7890<br>git config --global https.proxy https://127.0.0.1:7890<br></code></pre></td></tr></table></figure><h3 id="4-取消git代理"><a href="#4-取消git代理" class="headerlink" title="4. 取消git代理"></a>4. 取消git代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><h3 id="5-显示代理"><a href="#5-显示代理" class="headerlink" title="5. 显示代理"></a>5. 显示代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示 HTTP_PROXY 代理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$http_proxy</span><br><br><span class="hljs-comment"># 显示 HTTPS_PROXY 代理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$https_proxy</span><br><br><span class="hljs-comment"># 显示 FTP_PROXY 代理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$ftp_proxy</span><br><br><span class="hljs-comment"># 显示 SOCKET_PROXY 代理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$socket_proxy</span><br><br><span class="hljs-comment"># 显示 NO_PROXY 代理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$no_proxy</span><br><br><span class="hljs-comment"># 显示 ALL_PROXY 代理</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$all_proxy</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm卡在启动界面</title>
    <link href="/2022/12/11/PyCharm%E5%8D%A1%E5%9C%A8%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2/"/>
    <url>/2022/12/11/PyCharm%E5%8D%A1%E5%9C%A8%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>PyCharm突然打不开，卡在启动界面</p><p>找到日志，日志中有几行ERROR</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2022</span>-<span class="hljs-number">11</span>-<span class="hljs-number">09</span> <span class="hljs-number">09</span>:<span class="hljs-number">24</span>:<span class="hljs-number">00</span>,<span class="hljs-number">568</span> <span class="hljs-selector-attr">[   4847]</span>  ERROR - llij<span class="hljs-selector-class">.ide</span><span class="hljs-selector-class">.plugins</span><span class="hljs-selector-class">.PluginManager</span> - java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.BindException</span>: Address already <span class="hljs-keyword">in</span> use: bind <br>java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.CompletionException</span>: java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.BindException</span>: Address already <span class="hljs-keyword">in</span> use: bind<br>省略一长串日志<br></code></pre></td></tr></table></figure><p>通过日志，可以确定和网络服务有关，在网上找到解决方法</p><p>先关闭pycharm进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 管理员权限下运行</span><br>net stop winnat<br>net start winnat<br></code></pre></td></tr></table></figure><p>这时可能就OK了</p><p>如果还不行，就重置一遍网络配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 管理员权限下运行</span><br>netsh winsock reset<br></code></pre></td></tr></table></figure><p>然后重启</p><p>我是先执行了<strong>netsh winsock reset</strong>，重启后还不行，再次执行<strong>net stop winnat</strong> 和 <strong>net start winnat</strong>，然后就可以打开了。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux通过Pyenv安装多版本Python</title>
    <link href="/2022/11/30/Linux%E9%80%9A%E8%BF%87Pyenv%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACPython/"/>
    <url>/2022/11/30/Linux%E9%80%9A%E8%BF%87Pyenv%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACPython/</url>
    
    <content type="html"><![CDATA[<h3 id="一-pyenv安装"><a href="#一-pyenv安装" class="headerlink" title="一. pyenv安装"></a>一. pyenv安装</h3><p>官方安装教程  <a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a></p><h4 id="1-安装命令"><a href="#1-安装命令" class="headerlink" title="1. 安装命令"></a>1. 安装命令</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若是网络有问题，设置好代理</span><br>curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash<br><br><span class="hljs-comment"># 运行后若提示添加环境变量，根据下方步骤进行</span><br></code></pre></td></tr></table></figure><h4 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2. 环境变量"></a>2. 环境变量</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 环境变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.profile<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile<br><br><span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SHELL</span>&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-更新命令"><a href="#3-更新命令" class="headerlink" title="3. 更新命令"></a>3. 更新命令</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Update:</span><br>pyenv update<br></code></pre></td></tr></table></figure><h3 id="二-pyenv使用"><a href="#二-pyenv使用" class="headerlink" title="二. pyenv使用"></a>二. pyenv使用</h3><h4 id="1-version"><a href="#1-version" class="headerlink" title="1. version"></a>1. version</h4><p>   查看当前系统使用的python版本</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv version<br></code></pre></td></tr></table></figure><h4 id="2-versions"><a href="#2-versions" class="headerlink" title="2. versions"></a>2. versions</h4><p>查看当前系统拥有的python版本（system代表当前系统的python版本号）</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv versions<br></code></pre></td></tr></table></figure><h4 id="3-install-–list"><a href="#3-install-–list" class="headerlink" title="3. install –list"></a>3. install –list</h4><p>查看可以安装的版本</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv install --list<br></code></pre></td></tr></table></figure><h4 id="4-install"><a href="#4-install" class="headerlink" title="4. install"></a>4. install</h4><p>安装指定版本</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv install 3.9.15<br></code></pre></td></tr></table></figure><h4 id="5-uninstall"><a href="#5-uninstall" class="headerlink" title="5. uninstall"></a>5. uninstall</h4><p>卸载指定python</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv uninstall 3.9.15<br></code></pre></td></tr></table></figure><h4 id="6-global"><a href="#6-global" class="headerlink" title="6. global"></a>6. global</h4><p>全局环境，为了不破坏系统默认环境，不建议使用global命令</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv global 3.9.15<br></code></pre></td></tr></table></figure><h4 id="7-local"><a href="#7-local" class="headerlink" title="7. local"></a>7. local</h4><p>仅对当前目录及其子目录生效，告诉目录使用版本3.9.15</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv <span class="hljs-built_in">local</span> 3.9.15<br></code></pre></td></tr></table></figure><h4 id="8-rehash"><a href="#8-rehash" class="headerlink" title="8. rehash"></a>8. rehash</h4><p>重建环境变量，每当你增删python版本或增删带可执行性的包（如pip）以后，都应该执行一次本命令pyenv rehash</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv <span class="hljs-built_in">rehash</span><br></code></pre></td></tr></table></figure><h4 id="9-virtualenv"><a href="#9-virtualenv" class="headerlink" title="9. virtualenv"></a>9. virtualenv</h4><p>python虚拟环境，创建指定版本的virtualenv</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv virtualenv &lt;版本&gt; &lt;名称&gt; <br>pyenv virtualenv 3.9.15 venvname<br></code></pre></td></tr></table></figure><h4 id="10-virtualenvs"><a href="#10-virtualenvs" class="headerlink" title="10. virtualenvs"></a>10. virtualenvs</h4><p>查看所有存在的virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv virtualenvs<br></code></pre></td></tr></table></figure><h4 id="11-activate"><a href="#11-activate" class="headerlink" title="11. activate"></a>11. activate</h4><p>手动激活指定virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv activate &lt;名称&gt;<br></code></pre></td></tr></table></figure><h4 id="12-deactivate"><a href="#12-deactivate" class="headerlink" title="12. deactivate"></a>12. deactivate</h4><p>手动关闭当前已被激活的virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv deactivate<br></code></pre></td></tr></table></figure><h4 id="13-删除指定virtualenv（三种方法）"><a href="#13-删除指定virtualenv（三种方法）" class="headerlink" title="13. 删除指定virtualenv（三种方法）"></a>13. 删除指定virtualenv（三种方法）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法一：删除文件</span><br><span class="hljs-comment">#直接删除$(pyenv root)/versions和$(pyenv root)/versions/&#123;version&#125;/envs中的指定目录</span><br><br><span class="hljs-comment"># 方法二：使用uninstall命令</span><br>pyenv uninstall &lt;名称&gt;<br><br><span class="hljs-comment"># 方法三：使用virtualenv-delete命令（建议）</span><br>pyenv virtualenv-delete &lt;名称&gt;<br></code></pre></td></tr></table></figure><h3 id="三-多版本python使用pip"><a href="#三-多版本python使用pip" class="headerlink" title="三. 多版本python使用pip"></a>三. 多版本python使用pip</h3><blockquote><p>若是报错，应该是缺少权限，加上sudo</p></blockquote><h4 id="1-pip-install"><a href="#1-pip-install" class="headerlink" title="1. pip install"></a>1. pip install</h4><p>通过指定python的pip安装第三方库</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 多个例子</span><br>python3.9 -m pip install scrapy<br><br>python3.9 -m pip install -r requirements.txt<br><br>~/.pyenv/versions/3.9.14/bin/python3.9 -m pip install scrapy<br><br>~/.pyenv/versions/3.9.14/envs/asset_manage_venv/bin/python3.9 -m pip install scrapy<br></code></pre></td></tr></table></figure><h4 id="2-upgrade-pip"><a href="#2-upgrade-pip" class="headerlink" title="2. upgrade pip"></a>2. upgrade pip</h4><p>更新指定python的pip</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 多个例子</span><br>python3.9 -m pip install --upgrade pip<br><br>~/.pyenv/versions/3.9.14/bin/python3.9 -m pip install --upgrade pip<br><br>~/.pyenv/versions/3.9.14/envs/asset_manage_venv/bin/python3.9 -m pip install --upgrade pip<br><br>~/.pyenv/versions/asset_manage_venv/bin/python3.9 -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><h4 id="3-pip换源"><a href="#3-pip换源" class="headerlink" title="3. pip换源"></a>3. pip换源</h4>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br><br><span class="hljs-comment"># 清华：https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="hljs-comment"># 阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="hljs-comment"># 豆瓣：http://pypi.doubanio.com/simple/</span><br><span class="hljs-comment"># 中科大：https://mirrors.bfsu.edu.cn/pypi/web/simple/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo简单搭建和使用记录</title>
    <link href="/2022/03/03/Hexo%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/03/Hexo%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="第一部分：搭建"><a href="#第一部分：搭建" class="headerlink" title="第一部分：搭建"></a>第一部分：搭建</h2><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><ul><li>下载：<a href="https://git-scm.com/">Git</a></li></ul><h3 id="2-安装NodeJs"><a href="#2-安装NodeJs" class="headerlink" title="2.安装NodeJs"></a>2.安装NodeJs</h3><ul><li><p>下载：<a href="https://nodejs.org/en/download/">NodeJs</a></p></li><li><p>修改 npm 的安装源为淘宝NPM镜像</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化文件夹（自动新建一个文件夹）</span><br>hexo init &lt;folder&gt;<br><span class="hljs-comment"># 进入新建的目录</span><br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h3><ul><li>新建一个<strong>repository</strong></li><li>命名：<code>&lt;你的 GitHub 用户名&gt;.github.io</code></li></ul><h3 id="5-连接GitHub"><a href="#5-连接GitHub" class="headerlink" title="5.连接GitHub"></a>5.连接GitHub</h3><ul><li>打开Git Bash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;GitHub账号名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;GitHub账号邮箱&quot;</span><br></code></pre></td></tr></table></figure><ul><li>创建SSH，一路回车</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;GitHub账号邮箱&quot;</span><br></code></pre></td></tr></table></figure><ul><li>查看SSH Key</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br><span class="hljs-comment"># 将输出的内容全部复制</span><br></code></pre></td></tr></table></figure><ul><li><p>打开GitHub，点击自己的头像，再点击<strong>Settings</strong></p></li><li><p>点击<strong>SSH and GPG keys</strong></p></li><li><p>点击<strong>New SSH key</strong></p></li></ul><blockquote><p>输入SSH key的名字，随便取；</p><p>再输入刚才复制的SSH key；</p></blockquote><ul><li><p>点击<strong>Add SSH key</strong>完成添加</p></li><li><p>验证是否成功，在Git Bash下输入：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><h3 id="6-配置Hexo一键部署到GitHub"><a href="#6-配置Hexo一键部署到GitHub" class="headerlink" title="6.配置Hexo一键部署到GitHub"></a>6.配置Hexo一键部署到GitHub</h3><ul><li>必须先在 <code>_config.yml</code> 中修改参数，例如：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;仓库url&gt;</span> <span class="hljs-comment"># https://github.com/用户名/用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><ul><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ul><li>第一次提交：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><ul><li>第一次deploy时可能需要输入username和password。</li></ul><h2 id="第二部分：使用"><a href="#第二部分：使用" class="headerlink" title="第二部分：使用"></a>第二部分：使用</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><ul><li><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p></li><li><p>参考文档：<a href="https://hexo.io/zh-cn/docs/configuration">配置</a></p></li></ul><h3 id="2-主题"><a href="#2-主题" class="headerlink" title="2.主题"></a>2.主题</h3><ul><li><p>下载自己喜欢的主题。本站使用<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>。</p></li><li><p>修改<code>_config.yml</code>里的<strong>theme</strong>为主题文件夹名称。</p></li></ul><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建文章</span><br>hexo new post &lt;title&gt;<br><br><span class="hljs-comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br>hexo clean<br><span class="hljs-comment"># 生成静态文件</span><br>hexo g<br><span class="hljs-comment"># 部署网站</span><br>hexo d<br></code></pre></td></tr></table></figure><h3 id="4-写作"><a href="#4-写作" class="headerlink" title="4.写作"></a>4.写作</h3><ul><li>新建文章</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">&quot;第一篇文章&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>进入<code>/source/_posts</code>目录，使用编辑器打开<code>第一篇文章.md</code>，开始书写文章。</p></li><li><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量。举例来说：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-02-28 13:23:07</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">日记</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">标签1</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">标签2</span><br><span class="hljs-comment"># fluid主题提供了文章页顶部大图和文章在首页的封面图，参数如下：</span><br><span class="hljs-comment"># banner_img: /img/post_banner.jpg</span><br><span class="hljs-comment"># index_img: /img/example.jpg</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><ul><li>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td><td align="left"></td></tr><tr><td align="left"><code>lang</code></td><td align="left">Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td><td align="left">Inherited from <code>_config.yml</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【少年无恙】王权霸业不是他《剑来》陈平安</title>
    <link href="/2020/12/15/%E3%80%90%E5%B0%91%E5%B9%B4%E6%97%A0%E6%81%99%E3%80%91%E7%8E%8B%E6%9D%83%E9%9C%B8%E4%B8%9A%E4%B8%8D%E6%98%AF%E4%BB%96%E3%80%8A%E5%89%91%E6%9D%A5%E3%80%8B%E9%99%88%E5%B9%B3%E5%AE%89/"/>
    <url>/2020/12/15/%E3%80%90%E5%B0%91%E5%B9%B4%E6%97%A0%E6%81%99%E3%80%91%E7%8E%8B%E6%9D%83%E9%9C%B8%E4%B8%9A%E4%B8%8D%E6%98%AF%E4%BB%96%E3%80%8A%E5%89%91%E6%9D%A5%E3%80%8B%E9%99%88%E5%B9%B3%E5%AE%89/</url>
    
    <content type="html"><![CDATA[<p>听了周笔畅的《少年无恙》</p><p>有点触动</p><p>然后剪辑了这个视频</p><p>但是因为时间的问题</p><p>没有太过于细致的打磨</p><p>比如让片段更加贴合歌词</p><p>不过</p><p>还是有不少的浏览量和点赞量</p><p>已经超过我的预期了</p><p>毕竟原本以为的是石沉大海的那种稿件</p><iframe style="width: 100%; height: 500px; max-width: 100%；align:center; padding: 20px 0;" src="//player.bilibili.com/player.html?aid=373114184&bvid=BV18Z4y1g7ie&cid=263358671&page=1" frameborder="no" scrolling="no" allowfullscreen="allowfullscreen"> </iframe><p>《剑来》广播剧上线后，</p><p>听了周笔畅演唱的主题曲《少年无恙》，</p><p>心中想起的是陈平安一直在远游，</p><p>道路艰险，</p><p>待风雪夜归，</p><p>与落魄山众人重逢时，</p><p>能微笑着说一句别来无恙。</p><p>若王权霸业如《剑来》陈平安一样，</p><p>从圈外远游而回，</p><p>最终《少年无恙》，</p><p>那又是多美好的假想~</p><p>BGM：少年无恙（《剑来》广播剧主题曲） - 周笔畅</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剪辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04上手动搭建LNMP环境</title>
    <link href="/2020/07/28/Ubuntu20-04%E4%B8%8A%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/07/28/Ubuntu20-04%E4%B8%8A%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>准备做点关于WordPress的测试，需要在本地搭建环境（非服务器），由于电脑系统为ubuntu20.04，于是就把搭建LNMP环境的过程记录下来了。</p><h2 id="前提条件：安装环境"><a href="#前提条件：安装环境" class="headerlink" title="前提条件：安装环境"></a>前提条件：安装环境</h2><p>本教程示例步骤适用于以下软件版本：<br>操作系统：Ubuntu 20.04 64位<br>Nginx版本：Nginx 1.18.0<br>MySQL版本：MySQL 8.0.20<br>PHP版本：PHP 7.4.3</p><h2 id="步骤一：安装-Nginx"><a href="#步骤一：安装-Nginx" class="headerlink" title="步骤一：安装 Nginx"></a>步骤一：安装 Nginx</h2><h3 id="1-运行以下命令安装Nginx。"><a href="#1-运行以下命令安装Nginx。" class="headerlink" title="1.运行以下命令安装Nginx。"></a>1.运行以下命令安装Nginx。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nginx<br></code></pre></td></tr></table></figure><h3 id="2-运行以下命令查看Nginx版本。"><a href="#2-运行以下命令查看Nginx版本。" class="headerlink" title="2.运行以下命令查看Nginx版本。"></a>2.运行以下命令查看Nginx版本。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -v<br></code></pre></td></tr></table></figure><h3 id="3-查看Nginx服务"><a href="#3-查看Nginx服务" class="headerlink" title="3.查看Nginx服务"></a>3.查看Nginx服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status nginx<br></code></pre></td></tr></table></figure><h2 id="步骤二：安装-PHP"><a href="#步骤二：安装-PHP" class="headerlink" title="步骤二：安装 PHP"></a>步骤二：安装 PHP</h2><h3 id="1-运行以下命令安装PHP。"><a href="#1-运行以下命令安装PHP。" class="headerlink" title="1.运行以下命令安装PHP。"></a>1.运行以下命令安装PHP。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install php7.4 php7.4-fpm php7.4-mysql<br></code></pre></td></tr></table></figure><ul><li>更多扩展根据需求自行安装。</li></ul><h3 id="2-运行以下命令查看PHP版本。"><a href="#2-运行以下命令查看PHP版本。" class="headerlink" title="2.运行以下命令查看PHP版本。"></a>2.运行以下命令查看PHP版本。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -v<br></code></pre></td></tr></table></figure><h3 id="3-运行以下命令查看进程。"><a href="#3-运行以下命令查看进程。" class="headerlink" title="3.运行以下命令查看进程。"></a>3.运行以下命令查看进程。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef |grep php<br></code></pre></td></tr></table></figure><h2 id="步骤三：安装-MySQL"><a href="#步骤三：安装-MySQL" class="headerlink" title="步骤三：安装 MySQL"></a>步骤三：安装 MySQL</h2><h3 id="1-运行以下命令安装MySQL。"><a href="#1-运行以下命令安装MySQL。" class="headerlink" title="1.运行以下命令安装MySQL。"></a>1.运行以下命令安装MySQL。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install mysql-server<br></code></pre></td></tr></table></figure><h3 id="2-运行以下命令查看MySQL版本号。"><a href="#2-运行以下命令查看MySQL版本号。" class="headerlink" title="2.运行以下命令查看MySQL版本号。"></a>2.运行以下命令查看MySQL版本号。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -V<br></code></pre></td></tr></table></figure><h3 id="3-运行以下命令启动MySQL。"><a href="#3-运行以下命令启动MySQL。" class="headerlink" title="3.运行以下命令启动MySQL。"></a>3.运行以下命令启动MySQL。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service mysql start<br></code></pre></td></tr></table></figure><h2 id="步骤四：配置Nginx"><a href="#步骤四：配置Nginx" class="headerlink" title="步骤四：配置Nginx"></a>步骤四：配置Nginx</h2><h3 id="1-运行以下命令备份Nginx配置文件。"><a href="#1-运行以下命令备份Nginx配置文件。" class="headerlink" title="1.运行以下命令备份Nginx配置文件。"></a>1.运行以下命令备份Nginx配置文件。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak<br></code></pre></td></tr></table></figure><h3 id="2-修改Nginx配置文件，添加Nginx对PHP的支持。"><a href="#2-修改Nginx配置文件，添加Nginx对PHP的支持。" class="headerlink" title="2.修改Nginx配置文件，添加Nginx对PHP的支持。"></a>2.修改Nginx配置文件，添加Nginx对PHP的支持。</h3><ul><li>运行以下命令打开Nginx配置文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vi /etc/nginx/sites-available/default<br></code></pre></td></tr></table></figure><ul><li>按i进入编辑模式。</li><li>在server大括号内，添加下列配置信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br><br>    <span class="hljs-comment"># SSL configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># listen 443 ssl default_server;</span><br>    <span class="hljs-comment"># listen [::]:443 ssl default_server;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Note: You should disable gzip for SSL traffic.</span><br>    <span class="hljs-comment"># See: https://bugs.debian.org/773332</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Read up on ssl_ciphers to ensure a secure configuration.</span><br>    <span class="hljs-comment"># See: https://bugs.debian.org/765782</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Self signed certs generated by the ssl-cert package</span><br>    <span class="hljs-comment"># Don&#x27;t use them in a production server!</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># include snippets/snakeoil.conf;</span><br><br>    root /home/devil/www;<br><br>    <span class="hljs-comment"># Add index.php to the list if you are using PHP</span><br>    index index.html index.htm index.php index.nginx-debian.html;<br><br>    server_name _;<br><br>    location / &#123;<br>        <span class="hljs-comment"># First attempt to serve request as file, then</span><br>        <span class="hljs-comment"># as directory, then fall back to displaying a 404.</span><br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br>        index index.php index.html index.htm;<br>    &#125;<br><br>    <span class="hljs-comment"># pass PHP scripts to FastCGI server</span><br>    <span class="hljs-comment">#</span><br>    location ~ \.php$ &#123;<br>        root /home/devil/www;<br>        fastcgi_index index.php;<br>        fastcgi_param  SCRIPT_FILENAME  $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>        include fastcgi_params;<br>        fastcgi_split_path_info ^(.+\.php)(/.+)$;<br>    <span class="hljs-comment">#   # With php-fpm (or other unix sockets):</span><br>        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;<br>    <span class="hljs-comment">#   # With php-cgi (or other tcp sockets):</span><br>    <span class="hljs-comment">#   fastcgi_pass 127.0.0.1:9000;</span><br>    &#125;<br><br>    <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>    <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>    <span class="hljs-comment">#</span><br>    location ~ /\.ht &#123;<br>        deny all;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>按下Esc键后，输入:wq并回车以保存并关闭配置文件。</li><li>运行以下命令测试nginx配置文件中是否存在语法错误</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nginx -t<br></code></pre></td></tr></table></figure><h3 id="3-运行以下命令重新启动Nginx服务。"><a href="#3-运行以下命令重新启动Nginx服务。" class="headerlink" title="3.运行以下命令重新启动Nginx服务。"></a>3.运行以下命令重新启动Nginx服务。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart nginx<br></code></pre></td></tr></table></figure><h3 id="4-运行以下命令设置Nginx服务开机自启动。"><a href="#4-运行以下命令设置Nginx服务开机自启动。" class="headerlink" title="4.运行以下命令设置Nginx服务开机自启动。"></a>4.运行以下命令设置Nginx服务开机自启动。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> nginx<br></code></pre></td></tr></table></figure><h2 id="步骤五：配置MySQL"><a href="#步骤五：配置MySQL" class="headerlink" title="步骤五：配置MySQL"></a>步骤五：配置MySQL</h2><h3 id="1-运行以下命令进入MySQL命令提示符界面。"><a href="#1-运行以下命令进入MySQL命令提示符界面。" class="headerlink" title="1.运行以下命令进入MySQL命令提示符界面。"></a>1.运行以下命令进入MySQL命令提示符界面。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mysql<br></code></pre></td></tr></table></figure><h3 id="2-运行以下命令重新设置root用户密码。"><a href="#2-运行以下命令重新设置root用户密码。" class="headerlink" title="2.运行以下命令重新设置root用户密码。"></a>2.运行以下命令重新设置root用户密码。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="步骤六：配置PHP"><a href="#步骤六：配置PHP" class="headerlink" title="步骤六：配置PHP"></a>步骤六：配置PHP</h2><h3 id="1-新建phpinfo-php文件，用于展示PHP信息。"><a href="#1-新建phpinfo-php文件，用于展示PHP信息。" class="headerlink" title="1.新建phpinfo.php文件，用于展示PHP信息。"></a>1.新建phpinfo.php文件，用于展示PHP信息。</h3><ul><li>运行以下命令新建文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /phpinfo.php  <span class="hljs-comment">#将替换为您配置的网站根目录。</span><br></code></pre></td></tr></table></figure><ul><li>网站根目录是您在nginx.conf文件中location ~ .php$大括号内配置的root值。</li><li>本教程配置的网站根目录为&#x2F;home&#x2F;devil&#x2F;www，因此命令为：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /home/devil/www/phpinfo.php<br></code></pre></td></tr></table></figure><ul><li>按i进入编辑模式。</li><li>输入下列内容，函数phpinfo()会展示PHP的所有配置信息。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>按Esc键后，输入:wq并回车以保存并关闭配置文件。</li></ul><h3 id="2-运行以下命令重新启动PHP-FPM。"><a href="#2-运行以下命令重新启动PHP-FPM。" class="headerlink" title="2.运行以下命令重新启动PHP-FPM。"></a>2.运行以下命令重新启动PHP-FPM。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart php7.4-fpm<br></code></pre></td></tr></table></figure><h3 id="3-运行以下命令设置PHP-FPM开机自启动。"><a href="#3-运行以下命令设置PHP-FPM开机自启动。" class="headerlink" title="3.运行以下命令设置PHP-FPM开机自启动。"></a>3.运行以下命令设置PHP-FPM开机自启动。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> php7.4-fpm<br></code></pre></td></tr></table></figure><h2 id="步骤七：安装phpMyAdmin（可选）"><a href="#步骤七：安装phpMyAdmin（可选）" class="headerlink" title="步骤七：安装phpMyAdmin（可选）"></a>步骤七：安装phpMyAdmin（可选）</h2><h3 id="1-运行以下命令安装phpMyAdmin。"><a href="#1-运行以下命令安装phpMyAdmin。" class="headerlink" title="1.运行以下命令安装phpMyAdmin。"></a>1.运行以下命令安装phpMyAdmin。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install phpmyadmin<br></code></pre></td></tr></table></figure><ul><li>窗口提示选择服务器，注意不要直接回车，而是确定选中 apache2 回车。</li><li>设定 phpMyAdmin 的密码。</li></ul><h3 id="2-运行以下命令建立-x2F-home-x2F-devil-x2F-www下的软连接"><a href="#2-运行以下命令建立-x2F-home-x2F-devil-x2F-www下的软连接" class="headerlink" title="2.运行以下命令建立&#x2F;home&#x2F;devil&#x2F;www下的软连接"></a>2.运行以下命令建立&#x2F;home&#x2F;devil&#x2F;www下的软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /usr/share/phpmyadmin /home/devil/www/phpmyadmin<br></code></pre></td></tr></table></figure><h3 id="3-运行以下命令重新启动Nginx服务。-1"><a href="#3-运行以下命令重新启动Nginx服务。-1" class="headerlink" title="3.运行以下命令重新启动Nginx服务。"></a>3.运行以下命令重新启动Nginx服务。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart nginx<br></code></pre></td></tr></table></figure><h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h3><ul><li>打开浏览器，地址栏输入<a href="http://localhost/phpmyadmin" title="http://localhost/phpmyadmin">http://localhost/phpmyadmin</a>，账号输入root，密码输入MySQL密码即可登录。</li><li>也可以账号phpmyadmin，密码按刚才安装phpmyadmin设的密码，只是本账户权限比root要低一些。</li></ul><h2 id="步骤八：测试访问LNMP平台"><a href="#步骤八：测试访问LNMP平台" class="headerlink" title="步骤八：测试访问LNMP平台"></a>步骤八：测试访问LNMP平台</h2><ul><li>打开浏览器。</li><li>在地址栏输入<a href="http://127.0.0.1/phpinfo.php">http://127.0.0.1/phpinfo.php</a></li><li>返回结果为PHP信息，表示LNMP本地开发环境部署成功。</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>LNMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsDelivr+github使用教程，免费好用的cdn</title>
    <link href="/2020/05/28/jsDelivr-github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84cdn/"/>
    <url>/2020/05/28/jsDelivr-github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84cdn/</url>
    
    <content type="html"><![CDATA[<p>记录备忘，内容参考别人。<br>之前不知道jsDelivr+github，无意发现后，就记录一下，免得再用时，忘记了过程。</p><h3 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h3><p><img src="/assets/images/blog_vmostecxykecihlvhq.png" alt="新建github仓库" title="新建github仓库"></p><h3 id="克隆Github仓库到本地"><a href="#克隆Github仓库到本地" class="headerlink" title="克隆Github仓库到本地"></a>克隆Github仓库到本地</h3><ul><li>点击 Clone or download，一键复制仓库地址。</li><li>在本地目录右键 Git Bash Here，执行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;一键复制的仓库地址&gt;<br></code></pre></td></tr></table></figure><h3 id="上传资源"><a href="#上传资源" class="headerlink" title="上传资源"></a>上传资源</h3><ul><li>复制需要上传的资源到本地git仓库（注：jsDelivr不支持加载超过20M的资源）</li><li>在本地git仓库目录下右键 Git Bash Here，执行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status                    //查看状态<br>git add .                     //添加所有文件到暂存区<br>git commit -m <span class="hljs-string">&#x27;版本号&#x27;</span>        //把文件提交到仓库<br>git push                      //推送至远程仓库<br></code></pre></td></tr></table></figure><h3 id="发布仓库"><a href="#发布仓库" class="headerlink" title="发布仓库"></a>发布仓库</h3><ul><li>点击release发布</li></ul><p><img src="/assets/images/blog_pqoozggtiueaegpqnq.png" alt="releasefabu" title="releasefabu"></p><ul><li>点击Create a new release</li><li>自定义发布版本号</li></ul><p><img src="/assets/images/blog_lnyouhroncpssdgpos.png" alt="release版本" title="release版本"></p><h3 id="通过jsDelivr引用资源"><a href="#通过jsDelivr引用资源" class="headerlink" title="通过jsDelivr引用资源"></a>通过jsDelivr引用资源</h3><p>使用方法：<a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>例如：</p><ul><li><a href="https://cdn.jsdelivr.net/gh/DevilXiaoChao/CDN@1.0/img/avatar.jpg">https://cdn.jsdelivr.net/gh/DevilXiaoChao/CDN@1.0/img/avatar.jpg</a></li><li><a href="https://cdn.jsdelivr.net/gh/DevilXiaoChao/CDN@1.0/css/style.css">https://cdn.jsdelivr.net/gh/DevilXiaoChao/CDN@1.0/css/style.css</a></li><li><a href="https://cdn.jsdelivr.net/gh/DevilXiaoChao/CDN@1.0//demo.mp4">https://cdn.jsdelivr.net/gh/DevilXiaoChao/CDN@1.0//demo.mp4</a></li></ul><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p><ul><li>&#x2F;&#x2F; 加载任何Github发布、提交或分支 <a href="https://cdn.jsdelivr.net/gh/user/repo@version/file">https://cdn.jsdelivr.net/gh/user/repo@version/file</a></li><li>&#x2F;&#x2F; 加载 jQuery v3.2.1 <a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a></li><li>&#x2F;&#x2F; 使用版本范围而不是特定版本 <a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</a> <a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</a></li><li>&#x2F;&#x2F; 完全省略该版本以获取最新版本 <a href="https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a></li><li>&#x2F;&#x2F; 将“.min”添加到任何JS&#x2F;CSS文件中以获取缩小版本，如果不存在，将为会自动生成 <a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</a></li><li>&#x2F;&#x2F; 在末尾添加 &#x2F; 以获取资源目录列表 <a href="https://cdn.jsdelivr.net/gh/jquery/jquery/">https://cdn.jsdelivr.net/gh/jquery/jquery/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsDelivr</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统jdk安装与配置</title>
    <link href="/2020/05/04/Linux%E7%B3%BB%E7%BB%9Fjdk%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/05/04/Linux%E7%B3%BB%E7%BB%9Fjdk%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.oracle.com/java/technologies/downloads/" title="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a><br>下载jdk-8u321-linux-x64.tar.gz压缩包</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>通过终端在&#x2F;usr&#x2F;local目录下新建java文件夹，命令行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /usr/local/java<br></code></pre></td></tr></table></figure><ul><li>解压压缩包，命令行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf jdk-8u321-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><ul><li>复制到&#x2F;usr&#x2F;local&#x2F;java，命令行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -r jdk1.8.0_321/ /usr/local/java/<br></code></pre></td></tr></table></figure><h3 id="设置jdk环境变量"><a href="#设置jdk环境变量" class="headerlink" title="设置jdk环境变量"></a>设置jdk环境变量</h3><ul><li>修改环境变量，命令行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vi ~/.bashrc<br></code></pre></td></tr></table></figure><ul><li>在末尾添加：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_321<br><br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><ul><li>保存后，使之生效：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><p>验证是否安装成功！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>jdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04安装kde桌面环境</title>
    <link href="/2020/04/27/Ubuntu20-04%E5%AE%89%E8%A3%85kde%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/04/27/Ubuntu20-04%E5%AE%89%E8%A3%85kde%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚刚记录了Ubuntu20.04安装、配置以及美化的过程，爱折腾的心思就又上来了。<br>Ubuntu20.04的桌面环境依旧是gnome，虽然体验上也还行，但是老感觉gnome桌面环境没有那么流畅，就想着装一个kde桌面环境。</p><h2 id="kde各版本差异"><a href="#kde各版本差异" class="headerlink" title="kde各版本差异"></a>kde各版本差异</h2><h3 id="kubuntu-desktop"><a href="#kubuntu-desktop" class="headerlink" title="kubuntu-desktop"></a>kubuntu-desktop</h3><p>网上找了点教程，发现这方面的教程不算太多，基本上都是通过安装kubuntu-desktop，来实现Ubuntu上安装kde桌面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kubuntu-desktop<br></code></pre></td></tr></table></figure><p>我用上面的命令试了一下，发现开机界面和系统信息里面，显示系统为kubuntu，作为强迫症患者来说，总感觉有点别扭。</p><h3 id="kde-full"><a href="#kde-full" class="headerlink" title="kde-full"></a>kde-full</h3><p>在谷歌上搜了一下，又安装了大坑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kde-full<br></code></pre></td></tr></table></figure><p>当时安装时，就想知道这到底有多完整，会安装哪些东西。<br>于是脑子有坑的试了一下。<br>行吧，不说了，我也不知道到底安装了多少东西，多了好多用不上的。</p><h3 id="kde-standard"><a href="#kde-standard" class="headerlink" title="kde-standard"></a>kde-standard</h3><p>相对于kde-full(完整版),还有kde-standard(标准版)和kde-plasma-desktop(最小安装)。<br>这次我机智了一下，去<a href="https://packages.ubuntu.com/" title="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a>查询了kde-standard和kde-plasma-desktop具体有哪些区别，又与kubuntu-desktop对比了一下。<br>最终，选择了安装kde-standard(标准版)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kde-standard<br></code></pre></td></tr></table></figure><p>这次感觉还不错，该有的都有了。</p><h3 id="kde-plasma-desktop"><a href="#kde-plasma-desktop" class="headerlink" title="kde-plasma-desktop"></a>kde-plasma-desktop</h3><p>这次在虚拟机中试着安装了一下kde-plasma-desktop。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kde-plasma-desktop<br></code></pre></td></tr></table></figure><p>就只是一个kde桌面环境，其他的东西需要另外安装，比如桌面壁纸程序就少了一些。<br>补充：感觉还是标准版比较合适，最小安装会少一些东西，配置时还是需要手动安装一些东西。不如装完标准版，手动卸载一部分不需要的东西就行了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>kde-standard(标准版)和kde-plasma-desktop(最小安装)都能接受。<br><strong>建议安装kde-standard(标准版)。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kde-standard<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kde</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows与Ubuntu双系统时间不同步的解决办法</title>
    <link href="/2020/04/26/Windows10%E4%B8%8EUbuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2020/04/26/Windows10%E4%B8%8EUbuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>win10与Ubuntu的双系统安装还不算困难，怕的就是装好后遇到各种问题，今天先备忘一个问题就是：Windows10与Ubuntu18.04&#x2F;20.04双系统时间不同步，相差八小时~</p></blockquote><ul><li>网上看到很多方法是修改Windows系统的注册表，我不喜欢这个方法，下面给个只需要在Ubuntu里操作的命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install ntpdate<br>sudo ntpdate time.windows.com<br></code></pre></td></tr></table></figure><ul><li>然后将时间更新到硬件上：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo hwclock --localtime --systohc<br></code></pre></td></tr></table></figure><ul><li><strong>如果运行完这些命令，切换到Windows10系统后还是相差8个小时，只需要再次运行一遍即可成功修改！</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>Windows</tag>
      
      <tag>时间同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04安装记录以及配置与美化</title>
    <link href="/2020/04/26/Ubuntu20-04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/"/>
    <url>/2020/04/26/Ubuntu20-04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Ubuntu20.04发布，立刻装上体验一下。以下回顾一下安装以及软件配置和美化的过程。</p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>不记录全部过程，写点重点。(只针对本人的计算机) </p><h3 id="1-分区"><a href="#1-分区" class="headerlink" title="1.分区"></a>1.分区</h3><table><thead><tr><th align="center">挂载点</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center">efi</td><td align="center">1024</td></tr><tr><td align="center">swap</td><td align="center">8192</td></tr><tr><td align="center">&#x2F;</td><td align="center">35840</td></tr><tr><td align="center">&#x2F;home</td><td align="center">余下全部</td></tr></tbody></table><p>启动引导器选择efi分区所在位置。</p><h3 id="2-一点小坑"><a href="#2-一点小坑" class="headerlink" title="2.一点小坑"></a>2.一点小坑</h3><h4 id="1-开机"><a href="#1-开机" class="headerlink" title="(1) 开机"></a>(1) 开机</h4><p>问题描述：安装完成后，开机显示 <strong>grub&gt;</strong> 命令行，没有正常进入系统。<br>解决操作：进入bios，修改fast boot状态。如果原本是打开的，那就关了；如果原本是关闭的，那就打开一下。</p><h4 id="2-时间同步"><a href="#2-时间同步" class="headerlink" title="(2) 时间同步"></a>(2) 时间同步</h4><p>Windows10与Ubuntu双系统时间不同步问题参考以前的文章：<a href="http://49.234.91.251/613/" title="Windows10与Ubuntu18.04双系统时间不同步的解决办法">Windows10与Ubuntu18.04双系统时间不同步的解决办法</a></p><h4 id="3-snap-store"><a href="#3-snap-store" class="headerlink" title="(3) snap-store"></a>(3) snap-store</h4><p>应用商店不加载应用； 安装gnome第三方主题后，应用商店背景透明。 ps：反正不用这玩意儿来装软件。 </p><h2 id="二、系统配置"><a href="#二、系统配置" class="headerlink" title="二、系统配置"></a>二、系统配置</h2><h3 id="1-修改软件源"><a href="#1-修改软件源" class="headerlink" title="1.修改软件源"></a>1.修改软件源</h3><p>打开软件和更新，修改为国内软件源。 </p><h3 id="2-显卡驱动"><a href="#2-显卡驱动" class="headerlink" title="2.显卡驱动"></a>2.显卡驱动</h3><p>在软件和更新里面附加驱动栏安装 </p><h2 id="三、安装必要软件"><a href="#三、安装必要软件" class="headerlink" title="三、安装必要软件"></a>三、安装必要软件</h2><h3 id="1-chrome浏览器"><a href="#1-chrome浏览器" class="headerlink" title="1.chrome浏览器"></a>1.chrome浏览器</h3><ul><li>进入<a href="https://www.google.cn/chrome/" title="chrome官网">chrome官网</a>，下载浏览器deb安装包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><h3 id="2-网易云音乐"><a href="#2-网易云音乐" class="headerlink" title="2.网易云音乐"></a>2.网易云音乐</h3><ul><li>打开<a href="https://music.163.com/#/download" title="网易云音乐官网">网易云音乐官网</a>，下载deb安装包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><h3 id="3-百度网盘"><a href="#3-百度网盘" class="headerlink" title="3.百度网盘"></a>3.百度网盘</h3><ul><li>官方出了linux客户端，就很舒服。打开<a href="http://pan.baidu.com/download" title="百度网盘官网">百度网盘官网</a>，下载deb安装包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><h3 id="4-WPS-Office-2019-For-Linux"><a href="#4-WPS-Office-2019-For-Linux" class="headerlink" title="4.WPS Office 2019 For Linux"></a>4.WPS Office 2019 For Linux</h3><ul><li>打开<a href="https://www.wps.cn/product/wpslinux" title="WPS下载地址">WPS下载地址</a>，下载deb安装包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><ul><li>打开后，会提示缺少字体，这个网上教程非常多。</li></ul><h3 id="5-VScode"><a href="#5-VScode" class="headerlink" title="5.VScode"></a>5.VScode</h3><ul><li>打开<a href="https://code.visualstudio.com/" title="VScode官网">VScode官网</a>，下载deb安装包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><h3 id="6-Guake"><a href="#6-Guake" class="headerlink" title="6.Guake"></a>6.Guake</h3><ul><li>下拉式Gnome桌面终端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install guake<br></code></pre></td></tr></table></figure><h3 id="7-vim编辑器"><a href="#7-vim编辑器" class="headerlink" title="7.vim编辑器"></a>7.vim编辑器</h3><ul><li>用Linux的话，绝对不能错过大名鼎鼎的vim神器，无需过多解释，体验一下就知道了～</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install vim<br></code></pre></td></tr></table></figure><h3 id="8-Jetbrains全家桶"><a href="#8-Jetbrains全家桶" class="headerlink" title="8.Jetbrains全家桶"></a>8.Jetbrains全家桶</h3><ul><li>不得不说jetbrains太强了，他家的IDE真的太好用了，在Linux上使用的话，强烈推荐使用jetbrains toolbox来管理，这个工具在<a href="https://www.jetbrains.com/zh-cn/toolbox-app/" title="jetbrains官网">jetbrains官网</a>可以下载，安装都是一键式操作，非常方便！</li></ul><h3 id="9-electron-ssr"><a href="#9-electron-ssr" class="headerlink" title="9.electron-ssr"></a>9.electron-ssr</h3><ul><li>下载地址：<a href="https://github.com/qingshuisiyuan/electron-ssr-backup/releases/" title="https://github.com/qingshuisiyuan/electron-ssr-backup/releases/">https://github.com/qingshuisiyuan/electron-ssr-backup/releases/</a></li><li>PS：以下描述来源：<a href="https://github.com/qingshuisiyuan/electron-ssr-backup/blob/master/Ubuntu.md" title="https://github.com/qingshuisiyuan/electron-ssr-backup/blob/master/Ubuntu.md">https://github.com/qingshuisiyuan/electron-ssr-backup/blob/master/Ubuntu.md</a></li></ul><h4 id="1-安装依赖："><a href="#1-安装依赖：" class="headerlink" title="(1) 安装依赖："></a>(1) 安装依赖：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install libcanberra-gtk-module libcanberra-gtk3-module gconf2 gconf-service libappindicator1<br></code></pre></td></tr></table></figure><h4 id="2-可选依赖（如果软件报错，请安装可选依赖）"><a href="#2-可选依赖（如果软件报错，请安装可选依赖）" class="headerlink" title="(2) 可选依赖（如果软件报错，请安装可选依赖）"></a>(2) 可选依赖（如果软件报错，请安装可选依赖）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libssl-dev<br>sudo apt-get install libsodium-dev<br></code></pre></td></tr></table></figure><h4 id="3-系统运行需要python2-7"><a href="#3-系统运行需要python2-7" class="headerlink" title="(3) 系统运行需要python2.7"></a>(3) 系统运行需要python2.7</h4><p>Ubuntu 20.04默认只有Python3，需要自行安装Python2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python<br></code></pre></td></tr></table></figure><h4 id="4-安装软件"><a href="#4-安装软件" class="headerlink" title="(4) 安装软件"></a>(4) 安装软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i *.deb<br></code></pre></td></tr></table></figure><h4 id="5-运行软件"><a href="#5-运行软件" class="headerlink" title="(5) 运行软件"></a>(5) 运行软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">electron-ssr<br></code></pre></td></tr></table></figure><h3 id="10-截图软件Flameshot"><a href="#10-截图软件Flameshot" class="headerlink" title="10.截图软件Flameshot"></a>10.截图软件Flameshot</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install flameshot<br></code></pre></td></tr></table></figure><ul><li>然后设置一个快捷键，设置&gt;键盘快捷键，设置一个自定义快捷键（拉到最下面）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">名称：shot<br>命令：flameshot gui<br>快捷键：Alt+z<br></code></pre></td></tr></table></figure><h3 id="11-小火车：sl"><a href="#11-小火车：sl" class="headerlink" title="11.小火车：sl"></a>11.小火车：sl</h3><p>很简单，就是开火车～ 安装 &amp; 使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install sl<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sl<br></code></pre></td></tr></table></figure><h3 id="12-screenfetch"><a href="#12-screenfetch" class="headerlink" title="12.screenfetch"></a>12.screenfetch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install screenfetch<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screenfetch<br></code></pre></td></tr></table></figure><h3 id="13-常用（国产）Windows软件"><a href="#13-常用（国产）Windows软件" class="headerlink" title="13.常用（国产）Windows软件"></a>13.常用（国产）Windows软件</h3><p>Deepin-Wine是GitHub上一个很棒的项目，Deepin工程师调配出来的wine环境，非常感谢Deepin和项目作者的贡献。 </p><h4 id="1-Deepin-Wine安装方法："><a href="#1-Deepin-Wine安装方法：" class="headerlink" title="(1) Deepin-Wine安装方法："></a>(1) Deepin-Wine安装方法：</h4><p>Deepin wine Ubuntu 项目主页：<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" title="https://github.com/wszqkzqk/deepin-wine-ubuntu">https://github.com/wszqkzqk/deepin-wine-ubuntu</a><br>可以选择使用git把这个项目克隆到本地，也可以选择直接下载完整压缩包，推荐下载完整压缩包。<br>下载解压之后，进入项目目录安装deepin-wine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> deepin-wine-ubuntu<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./install.sh<br></code></pre></td></tr></table></figure><h4 id="2-软件安装过程"><a href="#2-软件安装过程" class="headerlink" title="(2) 软件安装过程"></a>(2) 软件安装过程</h4><p>Deepin wine containers for Ubuntu项目主页：<a href="https://github.com/wszqkzqk/deepin-wine-containers-for-ubuntu" title="https://github.com/wszqkzqk/deepin-wine-containers-for-ubuntu">https://github.com/wszqkzqk/deepin-wine-containers-for-ubuntu</a><br>在已经装好deepin-wine-ubuntu的前提下，下载所需的软件安装包。<br>然后我们在这个文件夹打开终端，这里我以微信为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i deepin.com.wechat_2.6.8.65deepin0_i386.deb<br></code></pre></td></tr></table></figure><p>执行这个命令就开始安装了，但是有可能提示错误，一般都是由于缺少某些依赖包，输入以下命令，可以修复缺失的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install -f<br></code></pre></td></tr></table></figure><p>这样安装就完成了。</p><h3 id="14-输入法"><a href="#14-输入法" class="headerlink" title="14.输入法"></a>14.输入法</h3><blockquote><p>由于搜狗输入法在ubuntu20.04里面安装会出现好多一些依赖问题，暂时留坑。</p></blockquote><p><del>更新： 来填坑了，有大神提取了优麒麟里面的搜狗输入法，可以正常使用了！</del></p><p><del>传送门：<a href="https://gitee.com/laomocode/fcitx-sogouimebs" title="https://gitee.com/laomocode/fcitx-sogouimebs">https://gitee.com/laomocode/fcitx-sogouimebs</a>。</del></p><ul><li><p>2020.05.20更新：</p><p>百度输入法推出Linux版本了，刚刚安装了一下，在Ubuntu20.04上可以正常安装使用。如果不想使用上面优麒麟提取的搜狗输入法，可以安装百度输入法。</p><p>传送门：<a href="https://srf.baidu.com/site/guanwang_linux/index.html" title="https://srf.baidu.com/site/guanwang_linux/index.html">https://srf.baidu.com/site/guanwang_linux&#x2F;index.html</a></p><p>下载的是zip压缩包，包含了在deepin和Ubuntu下的安装教程，Ubuntu虽然没说明支不支持Ubuntu20.40,但是实测可以安装。</p></li><li><p>2020.08.29更新：</p><p><a href="https://pinyin.sogou.com/linux/?r=pinyin" title="搜狗输入法">搜狗输入法</a></p><p>官方已经适配Ubuntu20.04，已经卸载原来的大神提取的优麒麟版搜狗输入法，安装上最新的搜狗输入法了，使用感完美。</p></li></ul><h2 id="四、美化"><a href="#四、美化" class="headerlink" title="四、美化"></a>四、美化</h2><p>更新： 下面的美化部分仅针对gnome桌面环境进行的操作，若想使用kde桌面，请看我的另一篇文章：<a href="http://49.234.91.251/226/" title="ubuntu20.04安装kde桌面环境">ubuntu20.04安装kde桌面环境</a></p><h3 id="1-安装工具"><a href="#1-安装工具" class="headerlink" title="1.安装工具"></a>1.安装工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install gnome-tweak-tool gnome-shell-extensions chrome-gnome-shell<br></code></pre></td></tr></table></figure><h3 id="2-浏览器插件"><a href="#2-浏览器插件" class="headerlink" title="2.浏览器插件"></a>2.浏览器插件</h3><ul><li><p>在浏览器中安装扩展GNOME Shell integration</p></li><li><p>gnome插件地址<a href="https://extensions.gnome.org/" title="https://extensions.gnome.org">https://extensions.gnome.org</a></p></li><li><p>打开后，若是GNOME Shell integration还未安装，网页会提示安装。</p></li></ul><h4 id="1-安装User-Themes"><a href="#1-安装User-Themes" class="headerlink" title="(1) 安装User Themes"></a>(1) 安装User Themes</h4><ul><li>改变Gnome主题必要插件！</li><li>在网页进行安装:<a href="https://extensions.gnome.org/extension/19/user-themes/" title="https://extensions.gnome.org/extension/19/user-themes/">https://extensions.gnome.org/extension/19/user-themes/</a></li></ul><h4 id="2-安装Dash-to-Panel"><a href="#2-安装Dash-to-Panel" class="headerlink" title="(2) 安装Dash to Panel"></a>(2) 安装Dash to Panel</h4><ul><li>大部分ubuntu用户都推荐Dash to Dock，以用来模仿Mac OS风格。</li><li>我在使用Dash to Dock一段时间后，总是感觉屏幕上方的状态栏和下方的Dash占用了太多的屏幕空间，于是改投入Dash to Panel的怀抱。</li><li>Dash to Panel更像windows系统风格。</li><li>在网页进行安装：<a href="https://extensions.gnome.org/extension/1160/dash-to-panel/" title="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a></li><li>详细配置，自我把控。</li></ul><h3 id="3-主题"><a href="#3-主题" class="headerlink" title="3.主题"></a>3.主题</h3><h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="(1) 下载主题"></a>(1) 下载主题</h4><ul><li>GTK3 Themes：<a href="https://www.gnome-look.org/p/1275087/" title="McMojave">McMojave</a></li><li>Full Icon Themes：<a href="https://www.gnome-look.org/p/1305429/" title="McMojave-circle">McMojave-circle</a></li><li>Cursors：<a href="https://www.gnome-look.org/p/1084939/" title="OSX">OSX El Capitan</a></li></ul><h4 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="(2) 安装主题"></a>(2) 安装主题</h4><ul><li>将下载的GTK3 Themes主题解压，移动到 <strong>&#x2F;usr&#x2F;share&#x2F;themes&#x2F;</strong> 目录下。</li><li>将下载的Full Icon Themes主题和Cursors主题解压，移动到 <strong>&#x2F;usr&#x2F;share&#x2F;icons&#x2F;</strong> 目录下。</li><li>重新打开<strong>优化</strong>，在外观选项卡里修改<strong>应用程序</strong>和<strong>shell</strong>为Mojave-Dark。</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
